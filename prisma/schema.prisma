// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    role          Role      @default(USER)
}

enum Role {
    USER
    ADMIN
}

enum UrlStatus {
    ACTIVE
    INACTIVE
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

enum CategoryName {
    AUTO
    ANIMATION
    BUSINESS
    CLASSIC
    COMEDY
    COOKING
    CULTURE
    DOCUMENTARY
    EDUCATION
    ENTERTAINMENT
    FAMILY
    GENERAL
    KIDS
    LEGISLATIVE
    LIFESTYLE
    MOVIES
    MUSIC
    NEWS
    SPORTS
    SINGLE_STREAM
}

model Country {
    id        String       @id @default(cuid())
    name      String       @unique
    createdAt DateTime     @default(now())
    updatedAt DateTime     @updatedAt
    urls      CountryURL[]
    xtreams   XtreamURL[]
}

model CountryURL {
    id        String    @id @default(cuid())
    country   Country   @relation(fields: [countryId], references: [id], onDelete: Cascade)
    countryId String
    url       String
    status    UrlStatus @default(ACTIVE)
    isExpired Boolean   @default(false)

    @@unique([countryId, url])
    @@index([url])
    @@index([status])
}

model Category {
    id   String        @id @default(cuid())
    name CategoryName  @unique
    urls CategoryURL[]
}

model CategoryURL {
    id         String    @id @default(cuid())
    category   Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
    categoryId String
    url        String
    status     UrlStatus @default(ACTIVE)
    isExpired  Boolean   @default(false)

    @@unique([categoryId, url])
    @@index([url])
    @@index([status])
}

model XtreamURL {
    id        String    @id @default(cuid())
    url       String
    country   Country   @relation(fields: [countryId], references: [id], onDelete: Cascade)
    countryId String
    status    UrlStatus @default(ACTIVE)
    isExpired Boolean   @default(false)

    @@index([url])
    @@index([status])
}
